<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="Admins-MBP.lan" failures="3" tests="75" name="Test" time="13.02" errors="0" timestamp="2025-01-06T17:43:27 IST">
  <testcase classname="bearerTokenGenerate.TestsBearerTokenGenerate" name="testOrderFlowGenerateToken" time="2.729"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsBeforeCreateOrder" time="0.496"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositivecreateOrder" time="0.899"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterCreateOrder" time="0.31"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveBatchAssign" time="0.175"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterBatchAssign" time="0.254"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveMarkPacked" time="0.135"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterMarkPacked" time="0.193"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveCreateShipment" time="0.689"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterCreateShipment" time="0.208"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveDispatch" time="0.162"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterDispatch" time="0.224"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInvoiceNumber" time="0.155"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber" time="0.189"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveDeliver" time="0.104">
    <failure type="java.lang.AssertionError" message="Test failed due to unexpected status code: 400">
      <![CDATA[java.lang.AssertionError: Test failed due to unexpected status code: 400
at allCommonData.TestHelper.validateStatusCode(TestHelper.java:21)
at orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveDeliver(TestsOrderFlowPositive.java:565)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 32 stack frames]]>
    </failure>
  </testcase> <!-- testOrderFlowPositiveDeliver -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterDeliver" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterDeliver -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveActionCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveAcceptItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveAcceptItemQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventorySettlement -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterInventorySettlement -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsBeforeCreateOrder" time="0.188"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativecreateOrder" time="0.216"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCreateOrder" time="0.209"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeBatchAssign" time="0.188"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterBatchAssign" time="0.163"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeMarkPacked" time="0.124"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterMarkPacked" time="0.178"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeCreateShipment" time="0.146"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCreateShipment" time="0.163"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeDispatch" time="0.137"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterDispatch" time="0.23"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInvoiceNumber" time="0.134"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber" time="0.211"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeDeliver" time="0.102">
    <failure type="java.lang.AssertionError" message="Test failed due to unexpected status code: 400">
      <![CDATA[java.lang.AssertionError: Test failed due to unexpected status code: 400
at allCommonData.TestHelper.validateStatusCode(TestHelper.java:21)
at orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeDeliver(TestsOrderFlowNegative.java:550)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 32 stack frames]]>
    </failure>
  </testcase> <!-- testOrderFlowNegativeDeliver -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterDeliver" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterDeliver -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeActionCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeRejectItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeRejectItemQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterRejectItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterRejectItemQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventorySettlement -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterInventorySettlement -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeOrderIdReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeOrderIdReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeActionCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeActionCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeAcceptItemQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeAcceptItemQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventorySettlementReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventorySettlementReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn -->
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder" time="0.249"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderCreateOrder" time="0.158"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder" time="0.19"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderCancelOrder" time="0.128"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder" time="0.229"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder" time="0.168"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchCreateOrder" time="0.249"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterCreateOrder" time="0.229"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchBatchAssign" time="0.153"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterBatchAssign" time="0.154"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchMarkPacked" time="0.177"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterMarkPacked" time="0.154"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchCreateShipment" time="0.164"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterCreateShipment" time="0.174"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchDispatch" time="0.127"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterDispatch" time="0.164"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchUpdateOrder" time="0.178"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder" time="0.188">
    <failure type="java.lang.AssertionError" message="The following asserts failed:
	Pending Stock value Before Create Order is: 97, New Ordered Quantity is: 7, Expected Pending Stock value (Pending Stock Value Before Updating Order + New Ordered Quantity) After Update Order is: 104, But Actual Pending Stock value After Update Order is: 102. Incorrect,
	Expected Intransient Stock value (Intransient Stock value After Update Order = Intransient Stock value Before Create Order) After Update Order is: 60 But Actual Intransient Stock value After Update Order is: 62. Incorrect,
	Expected Available Stock value (Available Stock value After Update Order = Available Stock value Before Create Order) After Update Order is: 99934 But Actual Available Stock value After Update Order is: 99932. Incorrect">
      <![CDATA[java.lang.AssertionError: The following asserts failed:
Pending Stock value Before Create Order is: 97, New Ordered Quantity is: 7, Expected Pending Stock value (Pending Stock Value Before Updating Order + New Ordered Quantity) After Update Order is: 104, But Actual Pending Stock value After Update Order is: 102. Incorrect,
Expected Intransient Stock value (Intransient Stock value After Update Order = Intransient Stock value Before Create Order) After Update Order is: 60 But Actual Intransient Stock value After Update Order is: 62. Incorrect,
Expected Available Stock value (Available Stock value After Update Order = Available Stock value Before Create Order) After Update Order is: 99934 But Actual Available Stock value After Update Order is: 99932. Incorrect
at orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder(TestsOrderUpdateDispatch.java:543)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder -->
</testsuite> <!-- Test -->
