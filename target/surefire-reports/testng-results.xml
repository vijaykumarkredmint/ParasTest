<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="75" passed="74" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-01-03T15:39:12 IST" name="Suite" finished-at="2025-01-03T15:39:39 IST" duration-ms="26794">
    <groups>
      <group name="OrderUpdateDispatch">
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchCreateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchCreateOrder" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterCreateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsAfterCreateOrder" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchBatchAssign()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchBatchAssign" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterBatchAssign()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsAfterBatchAssign" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchMarkPacked()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchMarkPacked" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterMarkPacked()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsAfterMarkPacked" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchCreateShipment()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchCreateShipment" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterCreateShipment()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsAfterCreateShipment" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchDispatch()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchDispatch" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterDispatch()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsAfterDispatch" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchUpdateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchUpdateOrder" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
        <method signature="TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" name="testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder" class="orderUpdateDispatch.TestsOrderUpdateDispatch"/>
      </group> <!-- OrderUpdateDispatch -->
      <group name="OrderCancelCreateOrder">
        <method signature="TestsOrderCancelCreateOrder.testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" name="testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder" class="orderCancelCreateOrder.TestsOrderCancelCreateOrder"/>
        <method signature="TestsOrderCancelCreateOrder.testOrderCancelCreateOrderCreateOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" name="testOrderCancelCreateOrderCreateOrder" class="orderCancelCreateOrder.TestsOrderCancelCreateOrder"/>
        <method signature="TestsOrderCancelCreateOrder.testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" name="testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder" class="orderCancelCreateOrder.TestsOrderCancelCreateOrder"/>
        <method signature="TestsOrderCancelCreateOrder.testOrderCancelCreateOrderCancelOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" name="testOrderCancelCreateOrderCancelOrder" class="orderCancelCreateOrder.TestsOrderCancelCreateOrder"/>
        <method signature="TestsOrderCancelCreateOrder.testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" name="testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder" class="orderCancelCreateOrder.TestsOrderCancelCreateOrder"/>
      </group> <!-- OrderCancelCreateOrder -->
      <group name="OrderFlowPositive">
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsBeforeCreateOrder" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositivecreateOrder()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositivecreateOrder" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterCreateOrder()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterCreateOrder" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveBatchAssign()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveBatchAssign" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterBatchAssign()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterBatchAssign" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveMarkPacked()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveMarkPacked" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterMarkPacked()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterMarkPacked" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveCreateShipment()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveCreateShipment" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterCreateShipment()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterCreateShipment" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveDispatch()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveDispatch" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterDispatch()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterDispatch" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInvoiceNumber()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInvoiceNumber" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveDeliver()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveDeliver" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterDeliver()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterDeliver" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveActionCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveActionCompleteQC" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveAcceptItemQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveAcceptItemQC" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveCompleteQC" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterCompleteQC" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventorySettlement()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventorySettlement" class="orderFlowPositive.TestsOrderFlowPositive"/>
        <method signature="TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterInventorySettlement()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" name="testOrderFlowPositiveInventoryDetailsAfterInventorySettlement" class="orderFlowPositive.TestsOrderFlowPositive"/>
      </group> <!-- OrderFlowPositive -->
      <group name="OrderFlowNegative">
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsBeforeCreateOrder" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativecreateOrder()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativecreateOrder" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCreateOrder()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterCreateOrder" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeBatchAssign()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeBatchAssign" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterBatchAssign()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterBatchAssign" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeMarkPacked()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeMarkPacked" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterMarkPacked()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterMarkPacked" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeCreateShipment()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeCreateShipment" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCreateShipment()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterCreateShipment" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeDispatch()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeDispatch" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterDispatch()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterDispatch" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInvoiceNumber()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInvoiceNumber" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeDeliver()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeDeliver" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterDeliver()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterDeliver" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeActionCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeActionCompleteQC" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeRejectItemQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeRejectItemQC" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterRejectItemQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterRejectItemQC" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeCompleteQC" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQC" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventorySettlement()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventorySettlement" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterInventorySettlement()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlement" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeOrderIdReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeOrderIdReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeActionCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeActionCompleteQCReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeAcceptItemQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeAcceptItemQCReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeCompleteQCReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventorySettlementReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventorySettlementReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
        <method signature="TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn" class="orderFlowNegative.TestsOrderFlowNegative"/>
      </group> <!-- OrderFlowNegative -->
      <group name="BearerTokenGeneration">
        <method signature="TestsBearerTokenGenerate.testOrderFlowGenerateToken()[pri:1, instance:bearerTokenGenerate.TestsBearerTokenGenerate@2a5c8d3f]" name="testOrderFlowGenerateToken" class="bearerTokenGenerate.TestsBearerTokenGenerate"/>
      </group> <!-- BearerTokenGeneration -->
    </groups>
    <test started-at="2025-01-03T15:39:12 IST" name="Test" finished-at="2025-01-03T15:39:39 IST" duration-ms="26794">
      <class name="orderUpdateDispatch.TestsOrderUpdateDispatch">
        <test-method signature="testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:36 IST" name="testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder" finished-at="2025-01-03T15:39:36 IST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder -->
        <test-method signature="testOrderUpdateDispatchCreateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:36 IST" name="testOrderUpdateDispatchCreateOrder" finished-at="2025-01-03T15:39:36 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchCreateOrder -->
        <test-method signature="testOrderUpdateDispatchInventoryDetailsAfterCreateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:36 IST" name="testOrderUpdateDispatchInventoryDetailsAfterCreateOrder" finished-at="2025-01-03T15:39:36 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchCreateOrder" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsAfterCreateOrder -->
        <test-method signature="testOrderUpdateDispatchBatchAssign()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:36 IST" name="testOrderUpdateDispatchBatchAssign" finished-at="2025-01-03T15:39:37 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterCreateOrder" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchBatchAssign -->
        <test-method signature="testOrderUpdateDispatchInventoryDetailsAfterBatchAssign()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:37 IST" name="testOrderUpdateDispatchInventoryDetailsAfterBatchAssign" finished-at="2025-01-03T15:39:37 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchBatchAssign" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsAfterBatchAssign -->
        <test-method signature="testOrderUpdateDispatchMarkPacked()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:37 IST" name="testOrderUpdateDispatchMarkPacked" finished-at="2025-01-03T15:39:37 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterBatchAssign" duration-ms="264" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchMarkPacked -->
        <test-method signature="testOrderUpdateDispatchInventoryDetailsAfterMarkPacked()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:37 IST" name="testOrderUpdateDispatchInventoryDetailsAfterMarkPacked" finished-at="2025-01-03T15:39:37 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchMarkPacked" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsAfterMarkPacked -->
        <test-method signature="testOrderUpdateDispatchCreateShipment()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:37 IST" name="testOrderUpdateDispatchCreateShipment" finished-at="2025-01-03T15:39:37 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterMarkPacked" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchCreateShipment -->
        <test-method signature="testOrderUpdateDispatchInventoryDetailsAfterCreateShipment()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:37 IST" name="testOrderUpdateDispatchInventoryDetailsAfterCreateShipment" finished-at="2025-01-03T15:39:37 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchCreateShipment" duration-ms="146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsAfterCreateShipment -->
        <test-method signature="testOrderUpdateDispatchDispatch()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:37 IST" name="testOrderUpdateDispatchDispatch" finished-at="2025-01-03T15:39:38 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterCreateShipment" duration-ms="362" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchDispatch -->
        <test-method signature="testOrderUpdateDispatchInventoryDetailsAfterDispatch()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:38 IST" name="testOrderUpdateDispatchInventoryDetailsAfterDispatch" finished-at="2025-01-03T15:39:38 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchDispatch" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsAfterDispatch -->
        <test-method signature="testOrderUpdateDispatchUpdateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:38 IST" name="testOrderUpdateDispatchUpdateOrder" finished-at="2025-01-03T15:39:39 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterDispatch" duration-ms="635" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchUpdateOrder -->
        <test-method signature="testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder()[pri:0, instance:orderUpdateDispatch.TestsOrderUpdateDispatch@8297b3a]" started-at="2025-01-03T15:39:39 IST" name="testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder" finished-at="2025-01-03T15:39:39 IST" depends-on-methods="orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchUpdateOrder" duration-ms="186" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Pending Stock value Before Create Order is: 39, New Ordered Quantity is: 7, Expected Pending Stock value (Pending Stock Value Before Updating Order + New Ordered Quantity) After Update Order is: 46, But Actual Pending Stock value After Update Order is: 44. Incorrect,
Expected Intransient Stock value (Intransient Stock value After Update Order = Intransient Stock value Before Create Order) After Update Order is: 31 But Actual Intransient Stock value After Update Order is: 33. Incorrect,
Expected Available Stock value (Available Stock value After Update Order = Available Stock value Before Create Order) After Update Order is: 99967 But Actual Available Stock value After Update Order is: 99965. Incorrect]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Pending Stock value Before Create Order is: 39, New Ordered Quantity is: 7, Expected Pending Stock value (Pending Stock Value Before Updating Order + New Ordered Quantity) After Update Order is: 46, But Actual Pending Stock value After Update Order is: 44. Incorrect,
Expected Intransient Stock value (Intransient Stock value After Update Order = Intransient Stock value Before Create Order) After Update Order is: 31 But Actual Intransient Stock value After Update Order is: 33. Incorrect,
Expected Available Stock value (Available Stock value After Update Order = Available Stock value Before Create Order) After Update Order is: 99967 But Actual Available Stock value After Update Order is: 99965. Incorrect
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:46)
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:30)
at orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder(TestsOrderUpdateDispatch.java:543)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder -->
      </class> <!-- orderUpdateDispatch.TestsOrderUpdateDispatch -->
      <class name="orderFlowNegative.TestsOrderFlowNegative">
        <test-method signature="testOrderFlowNegativeInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:28 IST" name="testOrderFlowNegativeInventoryDetailsBeforeCreateOrder" finished-at="2025-01-03T15:39:28 IST" duration-ms="176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsBeforeCreateOrder -->
        <test-method signature="testOrderFlowNegativecreateOrder()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:28 IST" name="testOrderFlowNegativecreateOrder" finished-at="2025-01-03T15:39:28 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsBeforeCreateOrder" duration-ms="246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativecreateOrder -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterCreateOrder()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:28 IST" name="testOrderFlowNegativeInventoryDetailsAfterCreateOrder" finished-at="2025-01-03T15:39:28 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativecreateOrder" duration-ms="181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterCreateOrder -->
        <test-method signature="testOrderFlowNegativeBatchAssign()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:28 IST" name="testOrderFlowNegativeBatchAssign" finished-at="2025-01-03T15:39:28 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCreateOrder" duration-ms="232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeBatchAssign -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterBatchAssign()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:28 IST" name="testOrderFlowNegativeInventoryDetailsAfterBatchAssign" finished-at="2025-01-03T15:39:29 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeBatchAssign" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterBatchAssign -->
        <test-method signature="testOrderFlowNegativeMarkPacked()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:29 IST" name="testOrderFlowNegativeMarkPacked" finished-at="2025-01-03T15:39:29 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterBatchAssign" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeMarkPacked -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterMarkPacked()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:29 IST" name="testOrderFlowNegativeInventoryDetailsAfterMarkPacked" finished-at="2025-01-03T15:39:29 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeMarkPacked" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterMarkPacked -->
        <test-method signature="testOrderFlowNegativeCreateShipment()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:29 IST" name="testOrderFlowNegativeCreateShipment" finished-at="2025-01-03T15:39:29 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterMarkPacked" duration-ms="462" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeCreateShipment -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterCreateShipment()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:29 IST" name="testOrderFlowNegativeInventoryDetailsAfterCreateShipment" finished-at="2025-01-03T15:39:30 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeCreateShipment" duration-ms="160" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterCreateShipment -->
        <test-method signature="testOrderFlowNegativeDispatch()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:30 IST" name="testOrderFlowNegativeDispatch" finished-at="2025-01-03T15:39:30 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCreateShipment" duration-ms="445" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeDispatch -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterDispatch()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:30 IST" name="testOrderFlowNegativeInventoryDetailsAfterDispatch" finished-at="2025-01-03T15:39:30 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeDispatch" duration-ms="182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterDispatch -->
        <test-method signature="testOrderFlowNegativeInvoiceNumber()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:30 IST" name="testOrderFlowNegativeInvoiceNumber" finished-at="2025-01-03T15:39:31 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterDispatch" duration-ms="439" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInvoiceNumber -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:31 IST" name="testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber" finished-at="2025-01-03T15:39:31 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInvoiceNumber" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber -->
        <test-method signature="testOrderFlowNegativeDeliver()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:31 IST" name="testOrderFlowNegativeDeliver" finished-at="2025-01-03T15:39:31 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber" duration-ms="254" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeDeliver -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterDeliver()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:31 IST" name="testOrderFlowNegativeInventoryDetailsAfterDeliver" finished-at="2025-01-03T15:39:31 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeDeliver" duration-ms="207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterDeliver -->
        <test-method signature="testOrderFlowNegativeActionCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:31 IST" name="testOrderFlowNegativeActionCompleteQC" finished-at="2025-01-03T15:39:31 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterDeliver" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeActionCompleteQC -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:31 IST" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC" finished-at="2025-01-03T15:39:32 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeActionCompleteQC" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC -->
        <test-method signature="testOrderFlowNegativeRejectItemQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:32 IST" name="testOrderFlowNegativeRejectItemQC" finished-at="2025-01-03T15:39:32 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC" duration-ms="232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeRejectItemQC -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterRejectItemQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:32 IST" name="testOrderFlowNegativeInventoryDetailsAfterRejectItemQC" finished-at="2025-01-03T15:39:32 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeRejectItemQC" duration-ms="151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterRejectItemQC -->
        <test-method signature="testOrderFlowNegativeCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:32 IST" name="testOrderFlowNegativeCompleteQC" finished-at="2025-01-03T15:39:32 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterRejectItemQC" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeCompleteQC -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterCompleteQC()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:32 IST" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQC" finished-at="2025-01-03T15:39:32 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeCompleteQC" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterCompleteQC -->
        <test-method signature="testOrderFlowNegativeInventorySettlement()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:32 IST" name="testOrderFlowNegativeInventorySettlement" finished-at="2025-01-03T15:39:33 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCompleteQC" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventorySettlement -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterInventorySettlement()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:33 IST" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlement" finished-at="2025-01-03T15:39:33 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventorySettlement" duration-ms="164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterInventorySettlement -->
        <test-method signature="testOrderFlowNegativeOrderIdReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:33 IST" name="testOrderFlowNegativeOrderIdReturn" finished-at="2025-01-03T15:39:33 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterInventorySettlement" duration-ms="654" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeOrderIdReturn -->
        <test-method signature="testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:33 IST" name="testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeOrderIdReturn" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn -->
        <test-method signature="testOrderFlowNegativeActionCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeActionCompleteQCReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeActionCompleteQCReturn -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeActionCompleteQCReturn" duration-ms="210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn -->
        <test-method signature="testOrderFlowNegativeAcceptItemQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeAcceptItemQCReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeAcceptItemQCReturn -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeAcceptItemQCReturn" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn -->
        <test-method signature="testOrderFlowNegativeCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeCompleteQCReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn" duration-ms="172" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeCompleteQCReturn -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn" finished-at="2025-01-03T15:39:34 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeCompleteQCReturn" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn -->
        <test-method signature="testOrderFlowNegativeInventorySettlementReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:34 IST" name="testOrderFlowNegativeInventorySettlementReturn" finished-at="2025-01-03T15:39:35 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn" duration-ms="265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventorySettlementReturn -->
        <test-method signature="testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn()[pri:0, instance:orderFlowNegative.TestsOrderFlowNegative@510f3d34]" started-at="2025-01-03T15:39:35 IST" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn" finished-at="2025-01-03T15:39:35 IST" depends-on-methods="orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeInventorySettlementReturn" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn -->
      </class> <!-- orderFlowNegative.TestsOrderFlowNegative -->
      <class name="orderCancelCreateOrder.TestsOrderCancelCreateOrder">
        <test-method signature="testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" started-at="2025-01-03T15:39:35 IST" name="testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder" finished-at="2025-01-03T15:39:35 IST" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder -->
        <test-method signature="testOrderCancelCreateOrderCreateOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" started-at="2025-01-03T15:39:35 IST" name="testOrderCancelCreateOrderCreateOrder" finished-at="2025-01-03T15:39:35 IST" depends-on-methods="orderCancelCreateOrder.TestsOrderCancelCreateOrder.testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder" duration-ms="436" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderCancelCreateOrderCreateOrder -->
        <test-method signature="testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" started-at="2025-01-03T15:39:35 IST" name="testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder" finished-at="2025-01-03T15:39:36 IST" depends-on-methods="orderCancelCreateOrder.TestsOrderCancelCreateOrder.testOrderCancelCreateOrderCreateOrder" duration-ms="165" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder -->
        <test-method signature="testOrderCancelCreateOrderCancelOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" started-at="2025-01-03T15:39:36 IST" name="testOrderCancelCreateOrderCancelOrder" finished-at="2025-01-03T15:39:36 IST" depends-on-methods="orderCancelCreateOrder.TestsOrderCancelCreateOrder.testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder" duration-ms="144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderCancelCreateOrderCancelOrder -->
        <test-method signature="testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder()[pri:0, instance:orderCancelCreateOrder.TestsOrderCancelCreateOrder@7817fd62]" started-at="2025-01-03T15:39:36 IST" name="testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder" finished-at="2025-01-03T15:39:36 IST" depends-on-methods="orderCancelCreateOrder.TestsOrderCancelCreateOrder.testOrderCancelCreateOrderCancelOrder" duration-ms="150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder -->
      </class> <!-- orderCancelCreateOrder.TestsOrderCancelCreateOrder -->
      <class name="bearerTokenGenerate.TestsBearerTokenGenerate">
        <test-method signature="testOrderFlowGenerateToken()[pri:1, instance:bearerTokenGenerate.TestsBearerTokenGenerate@2a5c8d3f]" started-at="2025-01-03T15:39:12 IST" name="testOrderFlowGenerateToken" finished-at="2025-01-03T15:39:16 IST" duration-ms="3348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowGenerateToken -->
      </class> <!-- bearerTokenGenerate.TestsBearerTokenGenerate -->
      <class name="orderFlowPositive.TestsOrderFlowPositive">
        <test-method signature="testOrderFlowPositiveInventoryDetailsBeforeCreateOrder()[pri:1, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:16 IST" name="testOrderFlowPositiveInventoryDetailsBeforeCreateOrder" finished-at="2025-01-03T15:39:17 IST" duration-ms="1048" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsBeforeCreateOrder -->
        <test-method signature="testOrderFlowPositivecreateOrder()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:17 IST" name="testOrderFlowPositivecreateOrder" finished-at="2025-01-03T15:39:21 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsBeforeCreateOrder" duration-ms="4109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositivecreateOrder -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterCreateOrder()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:21 IST" name="testOrderFlowPositiveInventoryDetailsAfterCreateOrder" finished-at="2025-01-03T15:39:21 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositivecreateOrder" duration-ms="235" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterCreateOrder -->
        <test-method signature="testOrderFlowPositiveBatchAssign()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:21 IST" name="testOrderFlowPositiveBatchAssign" finished-at="2025-01-03T15:39:22 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterCreateOrder" duration-ms="420" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveBatchAssign -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterBatchAssign()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:22 IST" name="testOrderFlowPositiveInventoryDetailsAfterBatchAssign" finished-at="2025-01-03T15:39:22 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveBatchAssign" duration-ms="213" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterBatchAssign -->
        <test-method signature="testOrderFlowPositiveMarkPacked()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:22 IST" name="testOrderFlowPositiveMarkPacked" finished-at="2025-01-03T15:39:22 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterBatchAssign" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveMarkPacked -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterMarkPacked()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:22 IST" name="testOrderFlowPositiveInventoryDetailsAfterMarkPacked" finished-at="2025-01-03T15:39:22 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveMarkPacked" duration-ms="184" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterMarkPacked -->
        <test-method signature="testOrderFlowPositiveCreateShipment()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:22 IST" name="testOrderFlowPositiveCreateShipment" finished-at="2025-01-03T15:39:23 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterMarkPacked" duration-ms="884" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveCreateShipment -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterCreateShipment()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:23 IST" name="testOrderFlowPositiveInventoryDetailsAfterCreateShipment" finished-at="2025-01-03T15:39:23 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveCreateShipment" duration-ms="180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterCreateShipment -->
        <test-method signature="testOrderFlowPositiveDispatch()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:23 IST" name="testOrderFlowPositiveDispatch" finished-at="2025-01-03T15:39:24 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterCreateShipment" duration-ms="525" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveDispatch -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterDispatch()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:24 IST" name="testOrderFlowPositiveInventoryDetailsAfterDispatch" finished-at="2025-01-03T15:39:24 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveDispatch" duration-ms="183" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterDispatch -->
        <test-method signature="testOrderFlowPositiveInvoiceNumber()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:24 IST" name="testOrderFlowPositiveInvoiceNumber" finished-at="2025-01-03T15:39:24 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterDispatch" duration-ms="338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInvoiceNumber -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:24 IST" name="testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber" finished-at="2025-01-03T15:39:25 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInvoiceNumber" duration-ms="206" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber -->
        <test-method signature="testOrderFlowPositiveDeliver()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:25 IST" name="testOrderFlowPositiveDeliver" finished-at="2025-01-03T15:39:25 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber" duration-ms="246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveDeliver -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterDeliver()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:25 IST" name="testOrderFlowPositiveInventoryDetailsAfterDeliver" finished-at="2025-01-03T15:39:25 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveDeliver" duration-ms="195" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterDeliver -->
        <test-method signature="testOrderFlowPositiveActionCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:25 IST" name="testOrderFlowPositiveActionCompleteQC" finished-at="2025-01-03T15:39:26 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterDeliver" duration-ms="763" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveActionCompleteQC -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:26 IST" name="testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC" finished-at="2025-01-03T15:39:26 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveActionCompleteQC" duration-ms="175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC -->
        <test-method signature="testOrderFlowPositiveAcceptItemQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:26 IST" name="testOrderFlowPositiveAcceptItemQC" finished-at="2025-01-03T15:39:26 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC" duration-ms="229" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveAcceptItemQC -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:26 IST" name="testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC" finished-at="2025-01-03T15:39:26 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveAcceptItemQC" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC -->
        <test-method signature="testOrderFlowPositiveCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:26 IST" name="testOrderFlowPositiveCompleteQC" finished-at="2025-01-03T15:39:27 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC" duration-ms="349" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveCompleteQC -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterCompleteQC()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:27 IST" name="testOrderFlowPositiveInventoryDetailsAfterCompleteQC" finished-at="2025-01-03T15:39:27 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveCompleteQC" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterCompleteQC -->
        <test-method signature="testOrderFlowPositiveInventorySettlement()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:27 IST" name="testOrderFlowPositiveInventorySettlement" finished-at="2025-01-03T15:39:27 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventoryDetailsAfterCompleteQC" duration-ms="442" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventorySettlement -->
        <test-method signature="testOrderFlowPositiveInventoryDetailsAfterInventorySettlement()[pri:0, instance:orderFlowPositive.TestsOrderFlowPositive@6ad82709]" started-at="2025-01-03T15:39:27 IST" name="testOrderFlowPositiveInventoryDetailsAfterInventorySettlement" finished-at="2025-01-03T15:39:28 IST" depends-on-methods="orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveInventorySettlement" duration-ms="193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderFlowPositiveInventoryDetailsAfterInventorySettlement -->
      </class> <!-- orderFlowPositive.TestsOrderFlowPositive -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
