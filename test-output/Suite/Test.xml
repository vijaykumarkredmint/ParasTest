<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="Admins-MacBook-Pro.local" failures="3" tests="75" name="Test" time="39.132" errors="0" timestamp="2025-01-03T17:44:09 IST">
  <testcase classname="bearerTokenGenerate.TestsBearerTokenGenerate" name="testOrderFlowGenerateToken" time="2.905"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsBeforeCreateOrder" time="0.562"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositivecreateOrder" time="2.868"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterCreateOrder" time="0.256"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveBatchAssign" time="0.442"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterBatchAssign" time="0.279"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveMarkPacked" time="0.634"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterMarkPacked" time="0.41"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveCreateShipment" time="12.61"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterCreateShipment" time="1.485"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveDispatch" time="0.671"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterDispatch" time="0.932"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInvoiceNumber" time="0.69"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterInvoiceNumber" time="0.949"/>
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveDeliver" time="0.111">
    <failure type="java.lang.AssertionError" message="Test failed due to unexpected status code: 400">
      <![CDATA[java.lang.AssertionError: Test failed due to unexpected status code: 400
at allCommonData.TestHelper.validateStatusCode(TestHelper.java:21)
at orderFlowPositive.TestsOrderFlowPositive.testOrderFlowPositiveDeliver(TestsOrderFlowPositive.java:565)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 26 stack frames]]>
    </failure>
  </testcase> <!-- testOrderFlowPositiveDeliver -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterDeliver" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterDeliver -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveActionCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC" time="0.006">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterActionCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveAcceptItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveAcceptItemQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterAcceptItemQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterCompleteQC -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventorySettlement -->
  <testcase classname="orderFlowPositive.TestsOrderFlowPositive" name="testOrderFlowPositiveInventoryDetailsAfterInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowPositiveInventoryDetailsAfterInventorySettlement -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsBeforeCreateOrder" time="0.195"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativecreateOrder" time="0.563"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCreateOrder" time="0.207"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeBatchAssign" time="0.398"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterBatchAssign" time="1.235"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeMarkPacked" time="0.795"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterMarkPacked" time="0.169"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeCreateShipment" time="0.762"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCreateShipment" time="0.169"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeDispatch" time="0.541"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterDispatch" time="0.169"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInvoiceNumber" time="0.248"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterInvoiceNumber" time="0.183"/>
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeDeliver" time="0.086">
    <failure type="java.lang.AssertionError" message="Test failed due to unexpected status code: 400">
      <![CDATA[java.lang.AssertionError: Test failed due to unexpected status code: 400
at allCommonData.TestHelper.validateStatusCode(TestHelper.java:21)
at orderFlowNegative.TestsOrderFlowNegative.testOrderFlowNegativeDeliver(TestsOrderFlowNegative.java:550)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 26 stack frames]]>
    </failure>
  </testcase> <!-- testOrderFlowNegativeDeliver -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterDeliver" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterDeliver -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeActionCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterActionCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeRejectItemQC" time="0.001">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeRejectItemQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterRejectItemQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterRejectItemQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQC" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterCompleteQC -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventorySettlement -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlement" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterInventorySettlement -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeOrderIdReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeOrderIdReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryAfterDetailsOrderIdReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeActionCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeActionCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterActionCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeAcceptItemQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeAcceptItemQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterAcceptItemQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterCompleteQCReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventorySettlementReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventorySettlementReturn -->
  <testcase classname="orderFlowNegative.TestsOrderFlowNegative" name="testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn" time="0.0">
    <skipped/>
  </testcase> <!-- testOrderFlowNegativeInventoryDetailsAfterInventorySettlementReturn -->
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderInventoryDetailsBeforeCreateOrder" time="0.219"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderCreateOrder" time="0.537"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderInventoryDetailsAfterCreateOrder" time="0.151"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderCancelOrder" time="0.263"/>
  <testcase classname="orderCancelCreateOrder.TestsOrderCancelCreateOrder" name="testOrderCancelCreateOrderInventoryDetailsAfterCancelOrder" time="0.174"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsBeforeCreateOrder" time="0.17"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchCreateOrder" time="0.444"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterCreateOrder" time="0.179"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchBatchAssign" time="0.429"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterBatchAssign" time="0.164"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchMarkPacked" time="0.461"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterMarkPacked" time="0.165"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchCreateShipment" time="0.532"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterCreateShipment" time="0.153"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchDispatch" time="0.475"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterDispatch" time="0.889"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchUpdateOrder" time="1.034"/>
  <testcase classname="orderUpdateDispatch.TestsOrderUpdateDispatch" name="testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder" time="0.458">
    <failure type="java.lang.AssertionError" message="The following asserts failed:
	Pending Stock value Before Create Order is: 54, New Ordered Quantity is: 7, Expected Pending Stock value (Pending Stock Value Before Updating Order + New Ordered Quantity) After Update Order is: 61, But Actual Pending Stock value After Update Order is: 59. Incorrect,
	Expected Intransient Stock value (Intransient Stock value After Update Order = Intransient Stock value Before Create Order) After Update Order is: 37 But Actual Intransient Stock value After Update Order is: 39. Incorrect,
	Expected Available Stock value (Available Stock value After Update Order = Available Stock value Before Create Order) After Update Order is: 99961 But Actual Available Stock value After Update Order is: 99959. Incorrect">
      <![CDATA[java.lang.AssertionError: The following asserts failed:
Pending Stock value Before Create Order is: 54, New Ordered Quantity is: 7, Expected Pending Stock value (Pending Stock Value Before Updating Order + New Ordered Quantity) After Update Order is: 61, But Actual Pending Stock value After Update Order is: 59. Incorrect,
Expected Intransient Stock value (Intransient Stock value After Update Order = Intransient Stock value Before Create Order) After Update Order is: 37 But Actual Intransient Stock value After Update Order is: 39. Incorrect,
Expected Available Stock value (Available Stock value After Update Order = Available Stock value Before Create Order) After Update Order is: 99961 But Actual Available Stock value After Update Order is: 99959. Incorrect
at orderUpdateDispatch.TestsOrderUpdateDispatch.testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder(TestsOrderUpdateDispatch.java:543)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- testOrderUpdateDispatchInventoryDetailsAfterUpdateOrder -->
</testsuite> <!-- Test -->
